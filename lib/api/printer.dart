// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `into`, `into`, `into`

///获取设备
Future<LddNetworkDriver> connectToNetworkDriver(
        {required String host, required int port}) =>
    RustLib.instance.api
        .crateApiPrinterConnectToNetworkDriver(host: host, port: port);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddConsoleDriver>>
abstract class LddConsoleDriver implements RustOpaqueInterface {
  static Future<LddConsoleDriver> open() =>
      RustLib.instance.api.crateApiPrinterLddConsoleDriverOpen();

  ///打开打印机
  Future<LddPrinter> openPrinter();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddFileDriver>>
abstract class LddFileDriver implements RustOpaqueInterface {
  static Future<LddFileDriver> open({required String path}) =>
      RustLib.instance.api.crateApiPrinterLddFileDriverOpen(path: path);

  ///打开打印机
  Future<LddPrinter> openPrinter();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddNetworkDriver>>
abstract class LddNetworkDriver implements RustOpaqueInterface {
  static Future<LddNetworkDriver> open(
          {required String host, required int port}) =>
      RustLib.instance.api
          .crateApiPrinterLddNetworkDriverOpen(host: host, port: port);

  ///打开打印机
  Future<LddPrinter> openPrinter();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddPrinter>>
abstract class LddPrinter implements RustOpaqueInterface {
  ///将文本向左、向右或居中对齐。
  Future<void> align({required LddAlignment alignment});

  ///构建条形码
  Future<void> barcode(
      {required FutureOr<DartBarcodeBuilder> Function() funCall});

  ///将文本的重点设置为粗体。
  Future<void> bold({required bool enabled});

  ///对纸张执行完整的剪切。
  Future<void> cut();

  ///对文本应用双击效果。
  Future<void> doublestrike({required bool enabled});

  ///送入n行纸张。
  Future<void> feed({required int n});

  ///将文本颠倒过来。
  Future<void> flip({required bool enabled});

  ///推送
  Future<void> flush();

  ///将字体设置为样式“a”、“b”或“c”。
  Future<void> font({required LddFont font});

  ///打印图形
  Future<void> graphic(
      {required FutureOr<DartGraphicBuilder> Function() funCall});

  ///初始化打印机。
  Future<void> init();

  ///将左间隔设置为n个点。
  Future<void> left({required int dots});

  ///调整文本行间距。
  Future<void> linespacing({required int height});

  /// 对纸张执行部分剪切。
  Future<void> partialCut();

  ///打印指定的文本。
  Future<void> print({required String text});

  ///打印以新行结尾的指定文本。
  Future<void> println({required String text});

  ///构建二维码
  Future<void> qr({required FutureOr<DartQrBuilder> Function() funCall});

  ///将打印机重置为默认设置。
  Future<void> reset();

  ///将行距重置为默认值。
  Future<void> resetLinespacing();

  ///重置文本的字体大小。
  Future<void> resetTextSize();

  /// 启用黑色背景上的白色文本。
  Future<void> reverseColours({required bool enabled});

  /// 将进纸反转n行。
  Future<void> reverseFeed({required int n});

  /// 与println相同，打印以新行结尾的指定文本。
  Future<void> text({required String text});

  ///设置文本的字体大小。
  Future<void> textSize(
      {required int widthMultiplier, required int heightMultiplier});

  ///用单笔或双笔在文本下划线。
  Future<void> underline({required LddUnderlineMode mode});

  ///设置可打印区域的宽度。
  Future<void> width({required int margin});
}

///构建条形码的对象
class DartBarcodeBuilder {
  final String? text;
  final DartBarcodeTextPosition? textPosition;
  final DartBarcodeSystem? system;
  final DartBarcodeFont? font;

  const DartBarcodeBuilder({
    this.text,
    this.textPosition,
    this.system,
    this.font,
  });

  @override
  int get hashCode =>
      text.hashCode ^ textPosition.hashCode ^ system.hashCode ^ font.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DartBarcodeBuilder &&
          runtimeType == other.runtimeType &&
          text == other.text &&
          textPosition == other.textPosition &&
          system == other.system &&
          font == other.font;
}

enum DartBarcodeFont {
  a,
  b,
  ;
}

enum DartBarcodeSystem {
  upcA,
  upcE,
  ean13,
  ean8,
  code39,
  itf,
  codabar,
  ;
}

enum DartBarcodeTextPosition {
  none,
  above,
  below,
  both,
  ;
}

///图像生成器
class DartGraphicBuilder {
  final String path;
  final DartGraphicSize? size;
  final int? maxWidth;

  const DartGraphicBuilder({
    required this.path,
    this.size,
    this.maxWidth,
  });

  @override
  int get hashCode => path.hashCode ^ size.hashCode ^ maxWidth.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DartGraphicBuilder &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          size == other.size &&
          maxWidth == other.maxWidth;
}

enum DartGraphicSize {
  normal,
  doubleWidth,
  doubleHeight,
  doubleWidthAndHeight,
  ;
}

///构建二维码的对象
class DartQrBuilder {
  final int? size;
  final String? text;
  final DartQrMode? model;
  final LddQrCorrectionLevel? level;

  const DartQrBuilder({
    this.size,
    this.text,
    this.model,
    this.level,
  });

  @override
  int get hashCode =>
      size.hashCode ^ text.hashCode ^ model.hashCode ^ level.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DartQrBuilder &&
          runtimeType == other.runtimeType &&
          size == other.size &&
          text == other.text &&
          model == other.model &&
          level == other.level;
}

enum DartQrMode {
  model1,
  model2,
  ;
}

enum LddAlignment {
  left,
  center,
  right,
  ;
}

enum LddFont {
  a,
  b,
  c,
  ;
}

enum LddQrCorrectionLevel {
  low,
  medium,
  quartile,
  high,
  ;
}

enum LddUnderlineMode {
  none,
  single,
  double,
  ;
}
