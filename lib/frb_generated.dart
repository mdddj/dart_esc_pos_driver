// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/printer.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => 1139224065;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'dart_esc_pos_driver',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<LddConsoleDriver> crateApiPrinterLddConsoleDriverOpen();

  Future<LddPrinter> crateApiPrinterLddConsoleDriverOpenPrinter(
      {required LddConsoleDriver that});

  Future<LddFileDriver> crateApiPrinterLddFileDriverOpen(
      {required String path});

  Future<LddPrinter> crateApiPrinterLddFileDriverOpenPrinter(
      {required LddFileDriver that});

  Future<LddNetworkDriver> crateApiPrinterLddNetworkDriverOpen(
      {required String host, required int port});

  Future<LddPrinter> crateApiPrinterLddNetworkDriverOpenPrinter(
      {required LddNetworkDriver that});

  Future<void> crateApiPrinterLddPrinterAlign(
      {required LddPrinter that, required LddAlignment alignment});

  Future<void> crateApiPrinterLddPrinterBarcode(
      {required LddPrinter that,
      required FutureOr<DartBarcodeBuilder> Function() funCall});

  Future<void> crateApiPrinterLddPrinterBold(
      {required LddPrinter that, required bool enabled});

  Future<void> crateApiPrinterLddPrinterCut({required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterDoublestrike(
      {required LddPrinter that, required bool enabled});

  Future<void> crateApiPrinterLddPrinterFeed(
      {required LddPrinter that, required int n});

  Future<void> crateApiPrinterLddPrinterFlip(
      {required LddPrinter that, required bool enabled});

  Future<void> crateApiPrinterLddPrinterFlush({required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterFont(
      {required LddPrinter that, required LddFont font});

  Future<void> crateApiPrinterLddPrinterGraphic(
      {required LddPrinter that,
      required FutureOr<DartGraphicBuilder> Function() funCall});

  Future<void> crateApiPrinterLddPrinterInit({required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterLeft(
      {required LddPrinter that, required int dots});

  Future<void> crateApiPrinterLddPrinterLinespacing(
      {required LddPrinter that, required int height});

  Future<void> crateApiPrinterLddPrinterPartialCut({required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterPrint(
      {required LddPrinter that, required String text});

  Future<void> crateApiPrinterLddPrinterPrintln(
      {required LddPrinter that, required String text});

  Future<void> crateApiPrinterLddPrinterQr(
      {required LddPrinter that,
      required FutureOr<DartQrBuilder> Function() funCall});

  Future<void> crateApiPrinterLddPrinterReset({required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterResetLinespacing(
      {required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterResetTextSize(
      {required LddPrinter that});

  Future<void> crateApiPrinterLddPrinterReverseColours(
      {required LddPrinter that, required bool enabled});

  Future<void> crateApiPrinterLddPrinterReverseFeed(
      {required LddPrinter that, required int n});

  Future<void> crateApiPrinterLddPrinterText(
      {required LddPrinter that, required String text});

  Future<void> crateApiPrinterLddPrinterTextSize(
      {required LddPrinter that,
      required int widthMultiplier,
      required int heightMultiplier});

  Future<void> crateApiPrinterLddPrinterUnderline(
      {required LddPrinter that, required LddUnderlineMode mode});

  Future<void> crateApiPrinterLddPrinterWidth(
      {required LddPrinter that, required int margin});

  Future<LddNetworkDriver> crateApiPrinterConnectToNetworkDriver(
      {required String host, required int port});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddConsoleDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddConsoleDriver;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LddConsoleDriverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddFileDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddFileDriver;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LddFileDriverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddNetworkDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddNetworkDriver;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LddNetworkDriverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddPrinter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddPrinter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LddPrinterPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<LddConsoleDriver> crateApiPrinterLddConsoleDriverOpen() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddConsoleDriverOpenConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddConsoleDriverOpenConstMeta =>
      const TaskConstMeta(
        debugName: "LddConsoleDriver_open",
        argNames: [],
      );

  @override
  Future<LddPrinter> crateApiPrinterLddConsoleDriverOpenPrinter(
      {required LddConsoleDriver that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterLddConsoleDriverOpenPrinterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddConsoleDriverOpenPrinterConstMeta =>
      const TaskConstMeta(
        debugName: "LddConsoleDriver_open_printer",
        argNames: ["that"],
      );

  @override
  Future<LddFileDriver> crateApiPrinterLddFileDriverOpen(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterLddFileDriverOpenConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddFileDriverOpenConstMeta =>
      const TaskConstMeta(
        debugName: "LddFileDriver_open",
        argNames: ["path"],
      );

  @override
  Future<LddPrinter> crateApiPrinterLddFileDriverOpenPrinter(
      {required LddFileDriver that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterLddFileDriverOpenPrinterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddFileDriverOpenPrinterConstMeta =>
      const TaskConstMeta(
        debugName: "LddFileDriver_open_printer",
        argNames: ["that"],
      );

  @override
  Future<LddNetworkDriver> crateApiPrinterLddNetworkDriverOpen(
      {required String host, required int port}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(host, serializer);
        sse_encode_u_16(port, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterLddNetworkDriverOpenConstMeta,
      argValues: [host, port],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddNetworkDriverOpenConstMeta =>
      const TaskConstMeta(
        debugName: "LddNetworkDriver_open",
        argNames: ["host", "port"],
      );

  @override
  Future<LddPrinter> crateApiPrinterLddNetworkDriverOpenPrinter(
      {required LddNetworkDriver that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterLddNetworkDriverOpenPrinterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddNetworkDriverOpenPrinterConstMeta =>
      const TaskConstMeta(
        debugName: "LddNetworkDriver_open_printer",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterAlign(
      {required LddPrinter that, required LddAlignment alignment}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_ldd_alignment(alignment, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterAlignConstMeta,
      argValues: [that, alignment],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterAlignConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_align",
        argNames: ["that", "alignment"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterBarcode(
      {required LddPrinter that,
      required FutureOr<DartBarcodeBuilder> Function() funCall}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_DartFn_Inputs__Output_dart_barcode_builder_AnyhowException(
            funCall, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterBarcodeConstMeta,
      argValues: [that, funCall],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterBarcodeConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_barcode",
        argNames: ["that", "funCall"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterBold(
      {required LddPrinter that, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterBoldConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterBoldConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_bold",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterCut({required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterCutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterCutConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_cut",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterDoublestrike(
      {required LddPrinter that, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterDoublestrikeConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterDoublestrikeConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_doublestrike",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterFeed(
      {required LddPrinter that, required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_8(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterFeedConstMeta,
      argValues: [that, n],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterFeedConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_feed",
        argNames: ["that", "n"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterFlip(
      {required LddPrinter that, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterFlipConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterFlipConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_flip",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterFlush({required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterFlushConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterFlushConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_flush",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterFont(
      {required LddPrinter that, required LddFont font}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_ldd_font(font, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterFontConstMeta,
      argValues: [that, font],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterFontConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_font",
        argNames: ["that", "font"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterGraphic(
      {required LddPrinter that,
      required FutureOr<DartGraphicBuilder> Function() funCall}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_DartFn_Inputs__Output_dart_graphic_builder_AnyhowException(
            funCall, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterGraphicConstMeta,
      argValues: [that, funCall],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterGraphicConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_graphic",
        argNames: ["that", "funCall"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterInit({required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterInitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterInitConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_init",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterLeft(
      {required LddPrinter that, required int dots}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_16(dots, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterLeftConstMeta,
      argValues: [that, dots],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterLeftConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_left",
        argNames: ["that", "dots"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterLinespacing(
      {required LddPrinter that, required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_8(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterLinespacingConstMeta,
      argValues: [that, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterLinespacingConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_linespacing",
        argNames: ["that", "height"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterPartialCut({required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterPartialCutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterPartialCutConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_partial_cut",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterPrint(
      {required LddPrinter that, required String text}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_String(text, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterPrintConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterPrintConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_print",
        argNames: ["that", "text"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterPrintln(
      {required LddPrinter that, required String text}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_String(text, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterPrintlnConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterPrintlnConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_println",
        argNames: ["that", "text"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterQr(
      {required LddPrinter that,
      required FutureOr<DartQrBuilder> Function() funCall}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_DartFn_Inputs__Output_dart_qr_builder_AnyhowException(
            funCall, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterQrConstMeta,
      argValues: [that, funCall],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterQrConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_qr",
        argNames: ["that", "funCall"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterReset({required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterResetConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_reset",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterResetLinespacing(
      {required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterResetLinespacingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterResetLinespacingConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_reset_linespacing",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterResetTextSize(
      {required LddPrinter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterResetTextSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterResetTextSizeConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_reset_text_size",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterReverseColours(
      {required LddPrinter that, required bool enabled}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_bool(enabled, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterReverseColoursConstMeta,
      argValues: [that, enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterReverseColoursConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_reverse_colours",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterReverseFeed(
      {required LddPrinter that, required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_8(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterReverseFeedConstMeta,
      argValues: [that, n],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterReverseFeedConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_reverse_feed",
        argNames: ["that", "n"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterText(
      {required LddPrinter that, required String text}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_String(text, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterTextConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterTextConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_text",
        argNames: ["that", "text"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterTextSize(
      {required LddPrinter that,
      required int widthMultiplier,
      required int heightMultiplier}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_8(widthMultiplier, serializer);
        sse_encode_u_8(heightMultiplier, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterTextSizeConstMeta,
      argValues: [that, widthMultiplier, heightMultiplier],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterTextSizeConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_text_size",
        argNames: ["that", "widthMultiplier", "heightMultiplier"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterUnderline(
      {required LddPrinter that, required LddUnderlineMode mode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_ldd_underline_mode(mode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterUnderlineConstMeta,
      argValues: [that, mode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterUnderlineConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_underline",
        argNames: ["that", "mode"],
      );

  @override
  Future<void> crateApiPrinterLddPrinterWidth(
      {required LddPrinter that, required int margin}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
            that, serializer);
        sse_encode_u_16(margin, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrinterLddPrinterWidthConstMeta,
      argValues: [that, margin],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterLddPrinterWidthConstMeta =>
      const TaskConstMeta(
        debugName: "LddPrinter_width",
        argNames: ["that", "margin"],
      );

  @override
  Future<LddNetworkDriver> crateApiPrinterConnectToNetworkDriver(
      {required String host, required int port}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(host, serializer);
        sse_encode_u_16(port, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrinterConnectToNetworkDriverConstMeta,
      argValues: [host, port],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrinterConnectToNetworkDriverConstMeta =>
      const TaskConstMeta(
        debugName: "connect_to_network_driver",
        argNames: ["host", "port"],
      );

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_dart_barcode_builder_AnyhowException(
      FutureOr<DartBarcodeBuilder> Function() raw) {
    return (
      callId,
    ) async {
      Box<DartBarcodeBuilder>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_dart_barcode_builder(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_dart_graphic_builder_AnyhowException(
      FutureOr<DartGraphicBuilder> Function() raw) {
    return (
      callId,
    ) async {
      Box<DartGraphicBuilder>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_dart_graphic_builder(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_dart_qr_builder_AnyhowException(
      FutureOr<DartQrBuilder> Function() raw) {
    return (
      callId,
    ) async {
      Box<DartQrBuilder>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_dart_qr_builder(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddConsoleDriver => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddConsoleDriver => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddFileDriver => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddFileDriver => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddNetworkDriver => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddNetworkDriver => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddPrinter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddPrinter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LddConsoleDriver
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddConsoleDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddFileDriver
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddFileDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddNetworkDriver
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddNetworkDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddPrinter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddPrinter
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<DartBarcodeBuilder> Function()
      dco_decode_DartFn_Inputs__Output_dart_barcode_builder_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DartGraphicBuilder> Function()
      dco_decode_DartFn_Inputs__Output_dart_graphic_builder_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DartQrBuilder> Function()
      dco_decode_DartFn_Inputs__Output_dart_qr_builder_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  LddConsoleDriver
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddConsoleDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddFileDriver
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddFileDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddNetworkDriver
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddNetworkDriverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddPrinter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DartBarcodeFont dco_decode_box_autoadd_dart_barcode_font(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_barcode_font(raw);
  }

  @protected
  DartBarcodeSystem dco_decode_box_autoadd_dart_barcode_system(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_barcode_system(raw);
  }

  @protected
  DartBarcodeTextPosition dco_decode_box_autoadd_dart_barcode_text_position(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_barcode_text_position(raw);
  }

  @protected
  DartGraphicSize dco_decode_box_autoadd_dart_graphic_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_graphic_size(raw);
  }

  @protected
  DartQrMode dco_decode_box_autoadd_dart_qr_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_qr_mode(raw);
  }

  @protected
  LddQrCorrectionLevel dco_decode_box_autoadd_ldd_qr_correction_level(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ldd_qr_correction_level(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  DartBarcodeBuilder dco_decode_dart_barcode_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartBarcodeBuilder(
      text: dco_decode_opt_String(arr[0]),
      textPosition:
          dco_decode_opt_box_autoadd_dart_barcode_text_position(arr[1]),
      system: dco_decode_opt_box_autoadd_dart_barcode_system(arr[2]),
      font: dco_decode_opt_box_autoadd_dart_barcode_font(arr[3]),
    );
  }

  @protected
  DartBarcodeFont dco_decode_dart_barcode_font(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartBarcodeFont.values[raw as int];
  }

  @protected
  DartBarcodeSystem dco_decode_dart_barcode_system(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartBarcodeSystem.values[raw as int];
  }

  @protected
  DartBarcodeTextPosition dco_decode_dart_barcode_text_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartBarcodeTextPosition.values[raw as int];
  }

  @protected
  DartGraphicBuilder dco_decode_dart_graphic_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DartGraphicBuilder(
      path: dco_decode_String(arr[0]),
      size: dco_decode_opt_box_autoadd_dart_graphic_size(arr[1]),
      maxWidth: dco_decode_opt_box_autoadd_u_32(arr[2]),
    );
  }

  @protected
  DartGraphicSize dco_decode_dart_graphic_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartGraphicSize.values[raw as int];
  }

  @protected
  DartQrBuilder dco_decode_dart_qr_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartQrBuilder(
      size: dco_decode_opt_box_autoadd_u_8(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      model: dco_decode_opt_box_autoadd_dart_qr_mode(arr[2]),
      level: dco_decode_opt_box_autoadd_ldd_qr_correction_level(arr[3]),
    );
  }

  @protected
  DartQrMode dco_decode_dart_qr_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartQrMode.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  LddAlignment dco_decode_ldd_alignment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddAlignment.values[raw as int];
  }

  @protected
  LddFont dco_decode_ldd_font(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddFont.values[raw as int];
  }

  @protected
  LddQrCorrectionLevel dco_decode_ldd_qr_correction_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddQrCorrectionLevel.values[raw as int];
  }

  @protected
  LddUnderlineMode dco_decode_ldd_underline_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddUnderlineMode.values[raw as int];
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DartBarcodeFont? dco_decode_opt_box_autoadd_dart_barcode_font(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_barcode_font(raw);
  }

  @protected
  DartBarcodeSystem? dco_decode_opt_box_autoadd_dart_barcode_system(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_barcode_system(raw);
  }

  @protected
  DartBarcodeTextPosition?
      dco_decode_opt_box_autoadd_dart_barcode_text_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_dart_barcode_text_position(raw);
  }

  @protected
  DartGraphicSize? dco_decode_opt_box_autoadd_dart_graphic_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_graphic_size(raw);
  }

  @protected
  DartQrMode? dco_decode_opt_box_autoadd_dart_qr_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_qr_mode(raw);
  }

  @protected
  LddQrCorrectionLevel? dco_decode_opt_box_autoadd_ldd_qr_correction_level(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_ldd_qr_correction_level(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LddConsoleDriver
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddConsoleDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddFileDriver
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddFileDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddNetworkDriver
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddNetworkDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddPrinter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddPrinter
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  LddConsoleDriver
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddConsoleDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddFileDriver
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddFileDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddNetworkDriver
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddNetworkDriverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddPrinter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DartBarcodeFont sse_decode_box_autoadd_dart_barcode_font(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_barcode_font(deserializer));
  }

  @protected
  DartBarcodeSystem sse_decode_box_autoadd_dart_barcode_system(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_barcode_system(deserializer));
  }

  @protected
  DartBarcodeTextPosition sse_decode_box_autoadd_dart_barcode_text_position(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_barcode_text_position(deserializer));
  }

  @protected
  DartGraphicSize sse_decode_box_autoadd_dart_graphic_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_graphic_size(deserializer));
  }

  @protected
  DartQrMode sse_decode_box_autoadd_dart_qr_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_qr_mode(deserializer));
  }

  @protected
  LddQrCorrectionLevel sse_decode_box_autoadd_ldd_qr_correction_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ldd_qr_correction_level(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  DartBarcodeBuilder sse_decode_dart_barcode_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_opt_String(deserializer);
    var var_textPosition =
        sse_decode_opt_box_autoadd_dart_barcode_text_position(deserializer);
    var var_system =
        sse_decode_opt_box_autoadd_dart_barcode_system(deserializer);
    var var_font = sse_decode_opt_box_autoadd_dart_barcode_font(deserializer);
    return DartBarcodeBuilder(
        text: var_text,
        textPosition: var_textPosition,
        system: var_system,
        font: var_font);
  }

  @protected
  DartBarcodeFont sse_decode_dart_barcode_font(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartBarcodeFont.values[inner];
  }

  @protected
  DartBarcodeSystem sse_decode_dart_barcode_system(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartBarcodeSystem.values[inner];
  }

  @protected
  DartBarcodeTextPosition sse_decode_dart_barcode_text_position(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartBarcodeTextPosition.values[inner];
  }

  @protected
  DartGraphicBuilder sse_decode_dart_graphic_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_size = sse_decode_opt_box_autoadd_dart_graphic_size(deserializer);
    var var_maxWidth = sse_decode_opt_box_autoadd_u_32(deserializer);
    return DartGraphicBuilder(
        path: var_path, size: var_size, maxWidth: var_maxWidth);
  }

  @protected
  DartGraphicSize sse_decode_dart_graphic_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartGraphicSize.values[inner];
  }

  @protected
  DartQrBuilder sse_decode_dart_qr_builder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_size = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_model = sse_decode_opt_box_autoadd_dart_qr_mode(deserializer);
    var var_level =
        sse_decode_opt_box_autoadd_ldd_qr_correction_level(deserializer);
    return DartQrBuilder(
        size: var_size, text: var_text, model: var_model, level: var_level);
  }

  @protected
  DartQrMode sse_decode_dart_qr_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartQrMode.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  LddAlignment sse_decode_ldd_alignment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LddAlignment.values[inner];
  }

  @protected
  LddFont sse_decode_ldd_font(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LddFont.values[inner];
  }

  @protected
  LddQrCorrectionLevel sse_decode_ldd_qr_correction_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LddQrCorrectionLevel.values[inner];
  }

  @protected
  LddUnderlineMode sse_decode_ldd_underline_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LddUnderlineMode.values[inner];
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartBarcodeFont? sse_decode_opt_box_autoadd_dart_barcode_font(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_barcode_font(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartBarcodeSystem? sse_decode_opt_box_autoadd_dart_barcode_system(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_barcode_system(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartBarcodeTextPosition?
      sse_decode_opt_box_autoadd_dart_barcode_text_position(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_barcode_text_position(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartGraphicSize? sse_decode_opt_box_autoadd_dart_graphic_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_graphic_size(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartQrMode? sse_decode_opt_box_autoadd_dart_qr_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_qr_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LddQrCorrectionLevel? sse_decode_opt_box_autoadd_ldd_qr_correction_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ldd_qr_correction_level(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          LddConsoleDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddConsoleDriverImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          LddFileDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddFileDriverImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          LddNetworkDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddNetworkDriverImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          LddPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddPrinterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          LddPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddPrinterImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_dart_barcode_builder_AnyhowException(
      FutureOr<DartBarcodeBuilder> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_dart_barcode_builder_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_dart_graphic_builder_AnyhowException(
      FutureOr<DartGraphicBuilder> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_dart_graphic_builder_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_dart_qr_builder_AnyhowException(
      FutureOr<DartQrBuilder> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_dart_qr_builder_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddConsoleDriver(
          LddConsoleDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddConsoleDriverImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddFileDriver(
          LddFileDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddFileDriverImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddNetworkDriver(
          LddNetworkDriver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddNetworkDriverImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddPrinter(
          LddPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddPrinterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_dart_barcode_font(
      DartBarcodeFont self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_barcode_font(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_barcode_system(
      DartBarcodeSystem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_barcode_system(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_barcode_text_position(
      DartBarcodeTextPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_barcode_text_position(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_graphic_size(
      DartGraphicSize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_graphic_size(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_qr_mode(
      DartQrMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_qr_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ldd_qr_correction_level(
      LddQrCorrectionLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ldd_qr_correction_level(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_dart_barcode_builder(
      DartBarcodeBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_box_autoadd_dart_barcode_text_position(
        self.textPosition, serializer);
    sse_encode_opt_box_autoadd_dart_barcode_system(self.system, serializer);
    sse_encode_opt_box_autoadd_dart_barcode_font(self.font, serializer);
  }

  @protected
  void sse_encode_dart_barcode_font(
      DartBarcodeFont self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_dart_barcode_system(
      DartBarcodeSystem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_dart_barcode_text_position(
      DartBarcodeTextPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_dart_graphic_builder(
      DartGraphicBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_opt_box_autoadd_dart_graphic_size(self.size, serializer);
    sse_encode_opt_box_autoadd_u_32(self.maxWidth, serializer);
  }

  @protected
  void sse_encode_dart_graphic_size(
      DartGraphicSize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_dart_qr_builder(
      DartQrBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_8(self.size, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_box_autoadd_dart_qr_mode(self.model, serializer);
    sse_encode_opt_box_autoadd_ldd_qr_correction_level(self.level, serializer);
  }

  @protected
  void sse_encode_dart_qr_mode(DartQrMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_ldd_alignment(LddAlignment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ldd_font(LddFont self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ldd_qr_correction_level(
      LddQrCorrectionLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ldd_underline_mode(
      LddUnderlineMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_barcode_font(
      DartBarcodeFont? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_barcode_font(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_barcode_system(
      DartBarcodeSystem? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_barcode_system(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_barcode_text_position(
      DartBarcodeTextPosition? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_barcode_text_position(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_graphic_size(
      DartGraphicSize? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_graphic_size(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_qr_mode(
      DartQrMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_qr_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ldd_qr_correction_level(
      LddQrCorrectionLevel? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ldd_qr_correction_level(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class LddConsoleDriverImpl extends RustOpaque implements LddConsoleDriver {
  // Not to be used by end users
  LddConsoleDriverImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddConsoleDriverImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddConsoleDriver,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddConsoleDriver,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LddConsoleDriverPtr,
  );

  ///打开打印机
  Future<LddPrinter> openPrinter() =>
      RustLib.instance.api.crateApiPrinterLddConsoleDriverOpenPrinter(
        that: this,
      );
}

@sealed
class LddFileDriverImpl extends RustOpaque implements LddFileDriver {
  // Not to be used by end users
  LddFileDriverImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddFileDriverImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddFileDriver,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddFileDriver,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddFileDriverPtr,
  );

  ///打开打印机
  Future<LddPrinter> openPrinter() =>
      RustLib.instance.api.crateApiPrinterLddFileDriverOpenPrinter(
        that: this,
      );
}

@sealed
class LddNetworkDriverImpl extends RustOpaque implements LddNetworkDriver {
  // Not to be used by end users
  LddNetworkDriverImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddNetworkDriverImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddNetworkDriver,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddNetworkDriver,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LddNetworkDriverPtr,
  );

  ///打开打印机
  Future<LddPrinter> openPrinter() =>
      RustLib.instance.api.crateApiPrinterLddNetworkDriverOpenPrinter(
        that: this,
      );
}

@sealed
class LddPrinterImpl extends RustOpaque implements LddPrinter {
  // Not to be used by end users
  LddPrinterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddPrinterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddPrinter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddPrinter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddPrinterPtr,
  );

  ///将文本向左、向右或居中对齐。
  Future<void> align({required LddAlignment alignment}) => RustLib.instance.api
      .crateApiPrinterLddPrinterAlign(that: this, alignment: alignment);

  ///构建条形码
  Future<void> barcode(
          {required FutureOr<DartBarcodeBuilder> Function() funCall}) =>
      RustLib.instance.api
          .crateApiPrinterLddPrinterBarcode(that: this, funCall: funCall);

  ///将文本的重点设置为粗体。
  Future<void> bold({required bool enabled}) => RustLib.instance.api
      .crateApiPrinterLddPrinterBold(that: this, enabled: enabled);

  ///对纸张执行完整的剪切。
  Future<void> cut() => RustLib.instance.api.crateApiPrinterLddPrinterCut(
        that: this,
      );

  ///对文本应用双击效果。
  Future<void> doublestrike({required bool enabled}) => RustLib.instance.api
      .crateApiPrinterLddPrinterDoublestrike(that: this, enabled: enabled);

  ///送入n行纸张。
  Future<void> feed({required int n}) =>
      RustLib.instance.api.crateApiPrinterLddPrinterFeed(that: this, n: n);

  ///将文本颠倒过来。
  Future<void> flip({required bool enabled}) => RustLib.instance.api
      .crateApiPrinterLddPrinterFlip(that: this, enabled: enabled);

  ///推送
  Future<void> flush() => RustLib.instance.api.crateApiPrinterLddPrinterFlush(
        that: this,
      );

  ///将字体设置为样式“a”、“b”或“c”。
  Future<void> font({required LddFont font}) => RustLib.instance.api
      .crateApiPrinterLddPrinterFont(that: this, font: font);

  ///打印图形
  Future<void> graphic(
          {required FutureOr<DartGraphicBuilder> Function() funCall}) =>
      RustLib.instance.api
          .crateApiPrinterLddPrinterGraphic(that: this, funCall: funCall);

  ///初始化打印机。
  Future<void> init() => RustLib.instance.api.crateApiPrinterLddPrinterInit(
        that: this,
      );

  ///将左间隔设置为n个点。
  Future<void> left({required int dots}) => RustLib.instance.api
      .crateApiPrinterLddPrinterLeft(that: this, dots: dots);

  ///调整文本行间距。
  Future<void> linespacing({required int height}) => RustLib.instance.api
      .crateApiPrinterLddPrinterLinespacing(that: this, height: height);

  /// 对纸张执行部分剪切。
  Future<void> partialCut() =>
      RustLib.instance.api.crateApiPrinterLddPrinterPartialCut(
        that: this,
      );

  ///打印指定的文本。
  Future<void> print({required String text}) => RustLib.instance.api
      .crateApiPrinterLddPrinterPrint(that: this, text: text);

  ///打印以新行结尾的指定文本。
  Future<void> println({required String text}) => RustLib.instance.api
      .crateApiPrinterLddPrinterPrintln(that: this, text: text);

  ///构建二维码
  Future<void> qr({required FutureOr<DartQrBuilder> Function() funCall}) =>
      RustLib.instance.api
          .crateApiPrinterLddPrinterQr(that: this, funCall: funCall);

  ///将打印机重置为默认设置。
  Future<void> reset() => RustLib.instance.api.crateApiPrinterLddPrinterReset(
        that: this,
      );

  ///将行距重置为默认值。
  Future<void> resetLinespacing() =>
      RustLib.instance.api.crateApiPrinterLddPrinterResetLinespacing(
        that: this,
      );

  ///重置文本的字体大小。
  Future<void> resetTextSize() =>
      RustLib.instance.api.crateApiPrinterLddPrinterResetTextSize(
        that: this,
      );

  /// 启用黑色背景上的白色文本。
  Future<void> reverseColours({required bool enabled}) => RustLib.instance.api
      .crateApiPrinterLddPrinterReverseColours(that: this, enabled: enabled);

  /// 将进纸反转n行。
  Future<void> reverseFeed({required int n}) => RustLib.instance.api
      .crateApiPrinterLddPrinterReverseFeed(that: this, n: n);

  /// 与println相同，打印以新行结尾的指定文本。
  Future<void> text({required String text}) => RustLib.instance.api
      .crateApiPrinterLddPrinterText(that: this, text: text);

  ///设置文本的字体大小。
  Future<void> textSize(
          {required int widthMultiplier, required int heightMultiplier}) =>
      RustLib.instance.api.crateApiPrinterLddPrinterTextSize(
          that: this,
          widthMultiplier: widthMultiplier,
          heightMultiplier: heightMultiplier);

  ///用单笔或双笔在文本下划线。
  Future<void> underline({required LddUnderlineMode mode}) =>
      RustLib.instance.api
          .crateApiPrinterLddPrinterUnderline(that: this, mode: mode);

  ///设置可打印区域的宽度。
  Future<void> width({required int margin}) => RustLib.instance.api
      .crateApiPrinterLddPrinterWidth(that: this, margin: margin);
}
